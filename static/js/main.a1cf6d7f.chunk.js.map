{"version":3,"sources":["components/ComposedTextField.tsx","lib/useHorribleErrors.ts","lib/usePrevious.ts","components/ErrorContainer.tsx","components/HorribleForm.tsx","App.tsx","theme/theme.ts","index.tsx"],"names":["ComposedTextField","form","handleChange","handleBlur","errors","touched","field","name","value","props","error","getIn","isTouched","TextField","variant","fullWidth","onChange","event","onBlur","useHorribleErrors","formikContext","useFormikContext","values","prevErrors","ref","useRef","useEffect","current","usePrevious","useState","metaErrors","setMetaErrors","some","e","filter","includes","password","errorEntries","Object","entries","console","log","newMetaErrors","map","cleaned","forEach","entry","clean","key","push","useStyles","makeStyles","theme","errorContainer","paddingTop","spacing","dirtyError","color","red","fontWeight","typography","fontWeightBold","cleanError","green","opacity","icon","ErrorContainer","Grid","container","classes","root","index","Slide","in","direction","mountOnEnter","unmountOnExit","item","xs","Typography","className","paper","minHeight","width","padding","validation","Yup","shape","required","matches","HorribleForm","validationSchema","initialValues","onSubmit","alert","submitForm","Paper","md","label","component","Button","onClick","display","flexDirection","alignItems","justifyContent","App","Container","createTheme","palette","primary","main","secondary","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.a1cf6d7f.chunk.js","sourcesContent":["import { TextFieldProps, TextField } from \"@material-ui/core\";\nimport { FieldProps, getIn } from \"formik\";\nimport { FC } from \"react\";\n\nconst ComposedTextField: FC<FieldProps & TextFieldProps> = ({\n  form: { handleChange, handleBlur, errors, touched },\n  field: { name, value },\n  ...props\n}) => {\n  const error = getIn(errors, name);\n  const isTouched = getIn(touched, name);\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    handleChange(event);\n  };\n  const onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    handleBlur(event);\n  };\n  return (\n    <TextField\n      variant=\"outlined\"\n      error={!!error && isTouched}\n      fullWidth={true}\n      name={name}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      {...props}\n    />\n  );\n};\n\nexport default ComposedTextField;\n","import { FormValues } from \"./../components/HorribleForm\";\nimport { FormikErrors, useFormikContext } from \"formik\";\nimport { usePrevious } from \"./usePrevious\";\nimport { useEffect, useState } from \"react\";\n\ntype MetaError = {\n  name: string;\n  error: string;\n  clean: boolean;\n};\n\nexport const useHorribleErrors = () => {\n  const formikContext = useFormikContext<FormValues>();\n  const values = formikContext?.values;\n  const errors = formikContext?.errors;\n  const prevErrors = usePrevious<FormikErrors<FormValues>>(errors);\n\n  const [metaErrors, setMetaErrors] = useState<MetaError[]>([]);\n\n  useEffect(() => {\n    // clear name errors except required if no name in values\n    if (errors !== prevErrors) {\n      if (metaErrors.some((e) => e.name === \"name\") && values && !values.name) {\n        setMetaErrors(\n          metaErrors.filter(\n            (e) => e.name !== \"name\" || e.error.includes(\"required\")\n          )\n        );\n      }\n    }\n  }, [metaErrors, values, errors, prevErrors]);\n\n  useEffect(() => {\n    // clear password errors except required if no password in values\n    if (errors !== prevErrors) {\n      if (\n        metaErrors.some((e) => e.name === \"password\") &&\n        values &&\n        !values.password\n      ) {\n        setMetaErrors(\n          metaErrors.filter(\n            (e) => e.name !== \"password\" || e.error.includes(\"required\")\n          )\n        );\n      }\n    }\n  }, [metaErrors, values, errors, prevErrors]);\n\n  useEffect(() => {\n    // if errors change, compare to meta errors\n\n    if (errors !== prevErrors) {\n      const errorEntries = Object.entries(errors);\n      console.log({ errorEntries });\n      const newMetaErrors = metaErrors.map((error) => {\n        let cleaned = true;\n        errorEntries.forEach((entry) => {\n          // if error has disappeared, set clean to true in meta errors\n\n          if (entry[0] === error.name && entry[1] === error.error) {\n            cleaned = false;\n          }\n        });\n        return { ...error, clean: cleaned };\n      });\n\n      // push any first new error to meta errors and break from loop\n\n      errorEntries.forEach((key) => {\n        if (\n          errors &&\n          !newMetaErrors.some(\n            (error) => error.name === key[0] && error.error === key[1]\n          )\n        ) {\n          newMetaErrors.push({\n            name: key[0],\n            error: key[1],\n            clean: false,\n          });\n          return;\n        }\n      });\n\n      setMetaErrors(newMetaErrors);\n    }\n  }, [errors, metaErrors, prevErrors]);\n\n  return metaErrors;\n};\n","import { useRef, useEffect } from \"react\";\n\n// Hook\nexport function usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref: any = useRef<T>();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import { Grid, makeStyles, Theme, Typography, Slide } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { useHorribleErrors } from \"../lib/useHorribleErrors\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  errorContainer: {\n    paddingTop: theme.spacing(7),\n  },\n  dirtyError: {\n    color: red[400],\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  cleanError: {\n    color: green[400],\n    fontWeight: theme.typography.fontWeightBold,\n    opacity: 0.5,\n  },\n  icon: {\n    paddingTop: theme.spacing(1.5),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n}));\n\nconst ErrorContainer: FC = () => {\n  const { errorContainer, dirtyError, cleanError, icon } = useStyles();\n  const metaErrors = useHorribleErrors();\n\n  return (\n    <Grid container={true} spacing={3} classes={{ root: errorContainer }}>\n      {metaErrors.map(({ error, clean }, index) => (\n        <Slide\n          in={true}\n          direction=\"left\"\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          <Grid item={true} key={index} xs={12}>\n            <Typography\n              variant=\"subtitle1\"\n              classes={{ root: clean ? cleanError : dirtyError }}\n            >\n              <span>\n                {clean ? (\n                  <CheckIcon className={icon} />\n                ) : (\n                  <CloseIcon className={icon} />\n                )}\n              </span>\n              {error}\n            </Typography>\n          </Grid>\n        </Slide>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ErrorContainer;\n","import { FC } from \"react\";\nimport {\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport ComposedTextField from \"./ComposedTextField\";\nimport { useHorribleErrors } from \"../lib/useHorribleErrors\";\nimport ErrorContainer from \"./ErrorContainer\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    minHeight: 500,\n    width: \"100%\",\n    padding: theme.spacing(3),\n  },\n}));\n\nconst validation = Yup.object().shape({\n  name: Yup.string().required(\"Name is required\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .matches(/(?=.*?[A-Z])/, \"Must contain an uppercase letter\")\n    .matches(/(?=.*?[a-z])/, \"Must contain a lowercase letter\"),\n});\n\nexport type FormValues = {\n  name: string;\n  password: string;\n};\n\nconst HorribleForm: FC = () => {\n  const { paper } = useStyles();\n  useHorribleErrors();\n  return (\n    <Formik<FormValues>\n      validationSchema={validation}\n      initialValues={{ name: \"\", password: \"\" }}\n      onSubmit={() => alert(\"you did it!\")}\n    >\n      {({ submitForm }) => (\n        <Paper classes={{ root: paper }}>\n          <Grid container={true} spacing={3}>\n            <Grid item={true} xs={12} md={6}>\n              <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                  <Typography variant=\"h4\">Horrible Form</Typography>\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <Field\n                    name=\"name\"\n                    label=\"Name\"\n                    component={ComposedTextField}\n                  />\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <Field\n                    name=\"password\"\n                    label=\"Password\"\n                    component={ComposedTextField}\n                  />\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth={true}\n                    onClick={submitForm}\n                  >\n                    Submit\n                  </Button>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item={true} xs={12} md={6}>\n              <ErrorContainer />\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n    </Formik>\n  );\n};\n\nexport default HorribleForm;\n","import React, { FC } from \"react\";\nimport \"./App.css\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles, DefaultTheme } from \"@material-ui/styles\";\nimport HorribleForm from \"./components/HorribleForm\";\n\nconst useStyles = makeStyles((theme: DefaultTheme) => ({\n  container: {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst App: FC = () => {\n  const { container } = useStyles();\n  return (\n    <Container className={container}>\n      <HorribleForm />\n    </Container>\n  );\n};\n\nexport default App;\n","import { red } from \"@material-ui/core/colors\";\nimport { createTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme/theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n"],"sourceRoot":""}