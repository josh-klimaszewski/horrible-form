{"version":3,"sources":["components/ComposedTextField.tsx","lib/useHorribleErrors.ts","lib/usePrevious.ts","components/ErrorContainer.tsx","components/SubmitButton.tsx","components/HorribleForm.tsx","App.tsx","theme/theme.ts","index.tsx"],"names":["ComposedTextField","form","handleChange","handleBlur","errors","touched","field","name","value","props","error","getIn","isTouched","TextField","variant","fullWidth","onChange","event","onBlur","useHorribleErrors","formikContext","useFormikContext","values","prevErrors","ref","useRef","useEffect","current","usePrevious","useState","metaErrors","setMetaErrors","password","some","e","prev","filter","includes","map","clean","errorEntries","Object","entries","newMetaErrors","cleaned","forEach","entry","key","push","useStyles","makeStyles","theme","errorContainer","paddingTop","spacing","dirtyError","color","red","fontWeight","typography","fontWeightBold","cleanError","green","opacity","icon","ErrorContainer","Grid","container","classes","root","index","Slide","in","direction","mountOnEnter","unmountOnExit","item","xs","Typography","className","SubmitButton","submitForm","Button","onClick","paper","minHeight","width","padding","validation","Yup","shape","required","min","matches","HorribleForm","validationSchema","initialValues","onSubmit","alert","Paper","md","label","component","display","flexDirection","alignItems","justifyContent","App","Container","createTheme","palette","primary","main","secondary","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.fa06c8a5.chunk.js","sourcesContent":["import { TextFieldProps, TextField } from \"@material-ui/core\";\nimport { FieldProps, getIn } from \"formik\";\nimport { FC } from \"react\";\n\nconst ComposedTextField: FC<FieldProps & TextFieldProps> = ({\n  form: { handleChange, handleBlur, errors, touched },\n  field: { name, value },\n  ...props\n}) => {\n  const error = getIn(errors, name);\n  const isTouched = getIn(touched, name);\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    handleChange(event);\n  };\n  const onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    handleBlur(event);\n  };\n  return (\n    <TextField\n      variant=\"outlined\"\n      error={!!error && isTouched}\n      fullWidth={true}\n      name={name}\n      onChange={onChange}\n      onBlur={onBlur}\n      value={value}\n      {...props}\n    />\n  );\n};\n\nexport default ComposedTextField;\n","import { FormValues } from \"./../components/HorribleForm\";\nimport { FormikErrors, useFormikContext } from \"formik\";\nimport { usePrevious } from \"./usePrevious\";\nimport { useEffect, useState } from \"react\";\n\ntype MetaError = {\n  name: string;\n  error: string;\n  clean: boolean;\n};\n\nexport const useHorribleErrors = () => {\n  const formikContext = useFormikContext<FormValues>();\n  const values = formikContext?.values;\n  const errors = formikContext?.errors;\n  const prevErrors = usePrevious<FormikErrors<FormValues>>(errors);\n  const [metaErrors, setMetaErrors] = useState<MetaError[]>([]);\n\n  useEffect(() => {\n    // if errors change, compare to meta errors\n\n    if (errors !== prevErrors) {\n      // clear password errors except required if no password in values\n\n      if (\n        errors?.password !== prevErrors?.password &&\n        metaErrors.some((e) => e.name === \"password\") &&\n        values &&\n        !values.password\n      ) {\n        setMetaErrors((prev) =>\n          prev\n            .filter(\n              (e) => e.name !== \"password\" || e.error.includes(\"required\")\n            )\n            .map((e) =>\n              e.error.includes(\"required\") && e.name === \"password\" ? { ...e, clean: false } : e\n            )\n        );\n      } else {\n        const errorEntries = Object.entries(errors);\n        const newMetaErrors = metaErrors.map((error) => {\n          let cleaned = true;\n          errorEntries.forEach((entry) => {\n            // if error has disappeared, set clean to true in meta errors\n\n            if (entry[0] === error.name && entry[1] === error.error) {\n              cleaned = false;\n            }\n          });\n          return { ...error, clean: cleaned };\n        });\n\n        // push any first new error to meta errors and break from loop\n\n        errorEntries.forEach((key) => {\n          if (\n            errors &&\n            !newMetaErrors.some(\n              (error) => error.name === key[0] && error.error === key[1]\n            )\n          ) {\n            newMetaErrors.push({\n              name: key[0],\n              error: key[1],\n              clean: false,\n            });\n            return;\n          }\n        });\n\n        setMetaErrors(newMetaErrors);\n      }\n    }\n  }, [errors, metaErrors, prevErrors, values]);\n\n  return metaErrors;\n};\n","import { useRef, useEffect } from \"react\";\n\n// Hook\nexport function usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref: any = useRef<T>();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import { Grid, makeStyles, Theme, Typography, Slide } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { useHorribleErrors } from \"../lib/useHorribleErrors\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  errorContainer: {\n    paddingTop: theme.spacing(7),\n  },\n  dirtyError: {\n    color: red[400],\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  cleanError: {\n    color: green[400],\n    fontWeight: theme.typography.fontWeightBold,\n    opacity: 0.5,\n  },\n  icon: {\n    paddingTop: theme.spacing(1.5),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n}));\n\nconst ErrorContainer: FC = () => {\n  const { errorContainer, dirtyError, cleanError, icon } = useStyles();\n  const metaErrors = useHorribleErrors();\n\n  return (\n    <Grid container={true} spacing={3} classes={{ root: errorContainer }}>\n      {metaErrors.map(({ error, clean }, index) => (\n        <Slide\n          key={index}\n          in={true}\n          direction=\"left\"\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          <Grid item={true} xs={12}>\n            <Typography\n              variant=\"subtitle1\"\n              classes={{ root: clean ? cleanError : dirtyError }}\n            >\n              <span>\n                {clean ? (\n                  <CheckIcon className={icon} />\n                ) : (\n                  <CloseIcon className={icon} />\n                )}\n              </span>\n              {error}\n            </Typography>\n          </Grid>\n        </Slide>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ErrorContainer;\n","import { Button } from \"@material-ui/core\";\nimport { useFormikContext } from \"formik\";\nimport { FC } from \"react\";\nimport { FormValues } from \"./HorribleForm\";\n\nconst SubmitButton: FC = () => {\n  const { submitForm } = useFormikContext<FormValues>();\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      fullWidth={true}\n      onClick={submitForm}\n    >\n      Submit\n    </Button>\n  );\n};\nexport default SubmitButton;\n","import { FC } from \"react\";\nimport {\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport ComposedTextField from \"./ComposedTextField\";\nimport { useHorribleErrors } from \"../lib/useHorribleErrors\";\nimport ErrorContainer from \"./ErrorContainer\";\nimport SubmitButton from \"./SubmitButton\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    minHeight: 500,\n    width: \"100%\",\n    padding: theme.spacing(3),\n  },\n}));\n\nconst validation = Yup.object().shape({\n  name: Yup.string().required(\"Name is required\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .min(8, \"Must contain at least 8 characters\")\n    .matches(/(?=.*?[A-Z])/, \"Must contain an uppercase letter\")\n    .matches(/(?=.*?[a-z])/, \"Must contain a lowercase letter\")\n    .matches(/(?=.*?[0-9])/, \"Must contain a digit\")\n    .matches(/(?=.*?[#?!@$%^&*-])/, \"Must contain a special character\")\n    .matches(\n      /^[0-9a-z].*[0-9a-z]$/i,\n      \"Special characters cannot be at the beginning or end\"\n    ),\n});\n\nexport type FormValues = {\n  name: string;\n  password: string;\n};\n\nconst HorribleForm: FC = () => {\n  const { paper } = useStyles();\n  useHorribleErrors();\n  return (\n    <Formik<FormValues>\n      validationSchema={validation}\n      initialValues={{ name: \"\", password: \"\" }}\n      onSubmit={() => alert(\"you did it!\")}\n    >\n      <Paper classes={{ root: paper }}>\n        <Grid container={true} spacing={3}>\n          <Grid item={true} xs={12} md={6}>\n            <Grid container={true} spacing={3}>\n              <Grid item={true} xs={12}>\n                <Typography variant=\"h4\">Horrible Form</Typography>\n              </Grid>\n              <Grid item={true} xs={12}>\n                <Field name=\"name\" label=\"Name\" component={ComposedTextField} />\n              </Grid>\n              <Grid item={true} xs={12}>\n                <Field\n                  name=\"password\"\n                  label=\"Password\"\n                  component={ComposedTextField}\n                />\n              </Grid>\n              <Grid item={true} xs={12}>\n                <SubmitButton />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item={true} xs={12} md={6}>\n            <ErrorContainer />\n          </Grid>\n        </Grid>\n      </Paper>\n    </Formik>\n  );\n};\n\nexport default HorribleForm;\n","import { FC } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport HorribleForm from \"./components/HorribleForm\";\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst App: FC = () => {\n  const { container } = useStyles();\n  return (\n    <Container className={container}>\n      <HorribleForm />\n    </Container>\n  );\n};\n\nexport default App;\n","import { red } from \"@material-ui/core/colors\";\nimport { createTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme/theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n"],"sourceRoot":""}