{"version":3,"sources":["lib/SubmitButton.tsx","components/react-hook-form/lib/TextField.tsx","lib/hooks/usePrevious.ts","components/react-hook-form/lib/useHorribleErrors.ts","lib/ErrorRenderer.tsx","components/react-hook-form/ErrorContainer.tsx","lib/utils.ts","components/react-hook-form/HorribleForm.tsx","App.tsx","theme/theme.ts","index.tsx"],"names":["SubmitButton","Button","variant","color","fullWidth","type","TextField","name","label","control","render","field","onChange","value","onBlur","error","fieldState","helperText","get","usePrevious","ref","useRef","useEffect","current","useStyles","makeStyles","theme","errorContainer","paddingTop","spacing","dirtyError","red","fontWeight","typography","fontWeightBold","cleanError","green","opacity","icon","ErrorRenderer","metaErrors","Grid","container","classes","root","map","index","clean","Slide","in","direction","mountOnEnter","unmountOnExit","item","xs","Typography","className","ErrorContainer","errors","useFormContext","formState","useState","setMetaErrors","handleErrors","useCallback","prevError","newMetaErrors","some","metaError","push","nameError","prevNameError","passwordError","prevPasswordError","passwordConfirmError","prevPasswordConfirmError","useHorribleErrors","validation","Yup","shape","required","password","min","matches","confirmPassword","test","context","parent","paper","minHeight","width","padding","defaultValues","HorribleForm","methods","useForm","mode","resolver","yupResolver","handleSubmit","onSubmit","data","console","log","alert","Paper","md","display","flexDirection","alignItems","justifyContent","App","Container","createTheme","palette","primary","main","secondary","A400","background","default","ReactDOM","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.b59dab3d.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\";\nimport { FC } from \"react\";\n\nconst SubmitButton: FC = () => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" fullWidth={true} type=\"submit\">\n      Submit\n    </Button>\n  );\n};\nexport default SubmitButton;\n","import { TextFieldProps, TextField as MuiTextField } from \"@material-ui/core\";\nimport { Controller, Control } from \"react-hook-form\";\nimport get from \"lodash/get\";\n\ntype Props<T> = TextFieldProps & {\n  control: Control<T>;\n};\n\nconst TextField = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  name,\n  label,\n  control,\n}: Props<TFormValues>) => (\n  <Controller<TFormValues, any>\n    name={name}\n    control={control}\n    render={({ field: { onChange, value, onBlur }, fieldState: { error } }) => (\n      <MuiTextField\n        helperText={get(error, \"message\")}\n        error={!!error}\n        onChange={onChange}\n        onBlur={onBlur}\n        value={value}\n        fullWidth={true}\n        label={label}\n        variant=\"outlined\"\n      />\n    )}\n  />\n);\n\nexport default TextField;\n","import { useRef, useEffect } from \"react\";\n\n// Hook\nexport function usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref: any = useRef<T>();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import { usePrevious } from \"../../../lib/hooks/usePrevious\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport get from \"lodash/get\";\nimport { MetaError } from \"../../../lib/types\";\n\nexport const useHorribleErrors = () => {\n  const {\n    formState: { errors },\n  } = useFormContext();\n  const [metaErrors, setMetaErrors] = useState<MetaError[]>([]);\n\n  const handleErrors = useCallback(\n    (name: string, error: string, prevError: string) => {\n      if (!!(error || prevError) && error !== prevError) {\n        const newMetaErrors = [...metaErrors];\n\n        if (\n          !!error &&\n          !metaErrors.some((metaError) => metaError.error === error)\n        ) {\n          newMetaErrors.push({\n            name,\n            error,\n            clean: false,\n          });\n        }\n\n        setMetaErrors(\n          newMetaErrors.map((metaError) => {\n            if (metaError.error === prevError) {\n              return { ...metaError, clean: true };\n            }\n            if (metaError.error === error) {\n              return { ...metaError, clean: false };\n            }\n            return metaError;\n          })\n        );\n      }\n    },\n    [metaErrors]\n  );\n\n  const nameError = get(errors, \"name.message\");\n  const prevNameError = usePrevious(nameError);\n\n  useEffect(() => {\n    handleErrors(\"name\", nameError, prevNameError);\n  }, [nameError, prevNameError, handleErrors]);\n\n  const passwordError = get(errors, \"password.message\");\n  const prevPasswordError = usePrevious(passwordError);\n\n  useEffect(() => {\n    handleErrors(\"password\", passwordError, prevPasswordError);\n  }, [passwordError, prevPasswordError, handleErrors]);\n\n  const passwordConfirmError = get(errors, \"confirmPassword.message\");\n  const prevPasswordConfirmError = usePrevious(passwordConfirmError);\n\n  useEffect(() => {\n    handleErrors(\n      \"confirmPassword\",\n      passwordConfirmError,\n      prevPasswordConfirmError\n    );\n  }, [passwordConfirmError, prevPasswordConfirmError, handleErrors]);\n\n  return metaErrors;\n};\n","import { Grid, makeStyles, Theme, Typography, Slide } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { green, red } from \"@material-ui/core/colors\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { MetaError } from \"./types\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  errorContainer: {\n    paddingTop: theme.spacing(7),\n  },\n  dirtyError: {\n    color: red[400],\n    fontWeight: theme.typography.fontWeightBold,\n  },\n  cleanError: {\n    color: green[400],\n    fontWeight: theme.typography.fontWeightBold,\n    opacity: 0.5,\n  },\n  icon: {\n    paddingTop: theme.spacing(1.5),\n    fontWeight: theme.typography.fontWeightBold,\n  },\n}));\n\ntype Props = { metaErrors: MetaError[] };\n\nconst ErrorRenderer: FC<Props> = ({ metaErrors }) => {\n  const { errorContainer, dirtyError, cleanError, icon } = useStyles();\n\n  return (\n    <Grid container={true} spacing={3} classes={{ root: errorContainer }}>\n      {metaErrors.map(({ error, clean }, index) => (\n        <Slide\n          key={index}\n          in={true}\n          direction=\"left\"\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          <Grid item={true} xs={12}>\n            <Typography\n              variant=\"subtitle1\"\n              classes={{ root: clean ? cleanError : dirtyError }}\n            >\n              <span>\n                {clean ? (\n                  <CheckIcon className={icon} />\n                ) : (\n                  <CloseIcon className={icon} />\n                )}\n              </span>\n              {error}\n            </Typography>\n          </Grid>\n        </Slide>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ErrorRenderer;\n","import { FC } from \"react\";\nimport { useHorribleErrors } from \"./lib/useHorribleErrors\";\nimport ErrorRenderer from \"../../lib/ErrorRenderer\";\n\nconst ErrorContainer: FC = () => {\n  const metaErrors = useHorribleErrors();\n  return <ErrorRenderer metaErrors={metaErrors} />;\n};\n\nexport default ErrorContainer;\n","import * as Yup from \"yup\";\n\nexport const validation = Yup.object().shape({\n  name: Yup.string().required(\"Name is required\"),\n  password: Yup.string()\n    .required(\"Password is required\")\n    .min(8, \"Must contain at least 8 characters\")\n    .matches(/(?=.*?[A-Z])/, \"Must contain an uppercase letter\")\n    .matches(/(?=.*?[a-z])/, \"Must contain a lowercase letter\")\n    .matches(/(?=.*?[0-9])/, \"Must contain a digit\")\n    .matches(/(?=.*?[#?!@$%^&*-])/, \"Must contain a special character\")\n    .matches(\n      /^[0-9a-z].*[0-9a-z]$/i,\n      \"Special characters cannot be at the beginning or end\"\n    ),\n  confirmPassword: Yup.string().test(\n    \"is-same-as-password\",\n    \"Passwords must match\",\n    (value, context) => value === context.parent[\"password\"]\n  ),\n});\n","import { FC } from \"react\";\nimport { Grid, makeStyles, Paper, Theme, Typography } from \"@material-ui/core\";\nimport SubmitButton from \"../../lib/SubmitButton\";\nimport { useForm, FormProvider, SubmitHandler } from \"react-hook-form\";\nimport TextField from \"./lib/TextField\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport ErrorContainer from \"./ErrorContainer\";\nimport { validation } from \"../../lib/utils\";\nimport { FormValues } from \"../../lib/types\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  paper: {\n    minHeight: 500,\n    width: \"100%\",\n    padding: theme.spacing(3),\n  },\n}));\n\nconst defaultValues: FormValues = {\n  name: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n};\n\nconst HorribleForm: FC = () => {\n  const { paper } = useStyles();\n\n  const methods = useForm<FormValues>({\n    defaultValues,\n    mode: \"onChange\",\n    resolver: yupResolver(validation),\n  });\n  const { handleSubmit, control } = methods;\n\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\n    console.log(data);\n    alert(\"you did it!\");\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Paper classes={{ root: paper }}>\n          <Grid container={true} spacing={3}>\n            <Grid item={true} xs={12} md={6}>\n              <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                  <Typography variant=\"h4\">Horrible Form</Typography>\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <TextField name=\"name\" label=\"Name\" control={control} />\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <TextField\n                    name=\"password\"\n                    label=\"Password\"\n                    control={control}\n                  />\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <TextField\n                    name=\"confirmPassword\"\n                    label=\"Confirm password\"\n                    control={control}\n                  />\n                </Grid>\n                <Grid item={true} xs={12}>\n                  <SubmitButton />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item={true} xs={12} md={6}>\n              <ErrorContainer />\n            </Grid>\n          </Grid>\n        </Paper>\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default HorribleForm;\n","import { FC } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport HorribleForm from \"./components/react-hook-form/HorribleForm\";\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst App: FC = () => {\n  const { container } = useStyles();\n  return (\n    <Container className={container}>\n      <HorribleForm />\n    </Container>\n  );\n};\n\nexport default App;\n","import { red } from \"@material-ui/core/colors\";\nimport { createTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme/theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n"],"sourceRoot":""}